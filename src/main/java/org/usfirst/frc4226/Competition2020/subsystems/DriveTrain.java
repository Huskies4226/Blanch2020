// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4226.Competition2020.subsystems;


import org.usfirst.frc4226.Competition2020.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private CANSparkMax fL_Drive;
    private CANSparkMax l_Drive;
    private CANSparkMax bL_Drive;
    private SpeedControllerGroup leftDriveMotors;
    private CANSparkMax fR_Drive;
    private CANSparkMax r_Drive;
    private CANSparkMax bR_Drive;
    private SpeedControllerGroup rightDriveMotors;
    private DifferentialDrive differentialDrive1;

    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
         

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    fL_Drive = new CANSparkMax(3, MotorType.kBrushless);
        fL_Drive.restoreFactoryDefaults();
        fL_Drive.setInverted(false);
        fL_Drive.setIdleMode(IdleMode.kCoast);

    l_Drive = new CANSparkMax(2, MotorType.kBrushless);
        l_Drive.restoreFactoryDefaults();
        l_Drive.setInverted(false);
        l_Drive.setIdleMode(IdleMode.kCoast);
        
    bL_Drive = new CANSparkMax(1, MotorType.kBrushless);
        bL_Drive.restoreFactoryDefaults();
        bL_Drive.setInverted(false);
        bL_Drive.setIdleMode(IdleMode.kCoast);

    leftDriveMotors = new SpeedControllerGroup(fL_Drive, l_Drive , bL_Drive );
        addChild("LeftDriveMotors",leftDriveMotors);

    fR_Drive = new CANSparkMax(6, MotorType.kBrushless);
        fR_Drive.restoreFactoryDefaults();
        fR_Drive.setInverted(false);
        fR_Drive.setIdleMode(IdleMode.kCoast);
        
    r_Drive = new CANSparkMax(5, MotorType.kBrushless);
        r_Drive.restoreFactoryDefaults();
        r_Drive.setInverted(false);
        r_Drive.setIdleMode(IdleMode.kCoast);

    bR_Drive = new CANSparkMax(4, MotorType.kBrushless);
        bR_Drive.restoreFactoryDefaults();
        bR_Drive.setInverted(false);
        bR_Drive.setIdleMode(IdleMode.kCoast);

    rightDriveMotors = new SpeedControllerGroup(fR_Drive, r_Drive , bR_Drive );
        addChild("RightDriveMotors",rightDriveMotors);
        
        
    differentialDrive1 = new DifferentialDrive(leftDriveMotors, rightDriveMotors);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(1.0);    

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveCommand());
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    public void arcade(double xSpeed, double zRotation) {
        differentialDrive1.arcadeDrive(xSpeed, zRotation, true);
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

